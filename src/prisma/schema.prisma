// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  admin
  recruiter
  freelance
}

enum paymentType {
  ewallet
  card
}

model User {
  userID           String             @id @default(cuid())
  email            String             @unique @db.VarChar(300)
  plan             String?            @db.VarChar(100)
  password         String             @db.VarChar(300)
  role             Role
  verified         Boolean            @default(false) @db.Boolean
  isArchive        Boolean            @default(false) @db.Boolean
  createdAt        DateTime           @default(now()) @db.Timestamp()
  updatedAt        DateTime           @default(now()) @updatedAt @db.Timestamp()
  Theme            Theme[]
  Font             Font[]
  Requirement      Requirements[]
  PassHistory      PasswordHash[]
  Application      Application[]
  Activity         ActivityLogs[]
  Notification     Notification[]
  Review           Review[]
  scheduleSender   Schedule[]         @relation("ScheduleSender")
  scheduleReceiver Schedule[]         @relation("ScheduleReceiver")
  sentMessages     Message[]          @relation("SentMessage")
  receivedMessages Message[]          @relation("ReceivedMessage")
  report           Report[]
  Organizer        ProjectOrganizer[]
  Favourite        Favourite[]
  ResetPassword    ResetPassword[]
  MessageStatus    MessageStatus[]
  Zoom             zintegration?
  Profile          Profile?
  Company          Company?
}

model zintegration {
  integrationID String  @id @default(cuid())
  accountID     String  @db.Text
  clientID      String  @db.Text
  secretID      String  @db.Text
  User          User?   @relation(fields: [userID], references: [userID])
  userID        String? @unique
}

model Requirements {
  requirementsID String   @id @default(cuid())
  requirement    String   @db.Text
  type           String   @db.VarChar(300)
  createdAt      DateTime @default(now()) @db.Timestamp()
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamp()
  User           User?    @relation(fields: [userID], references: [userID])
  userID         String?
  Company        Company? @relation(fields: [companyID], references: [companyID])
  companyID      String?
}

model Notification {
  notificationID   String             @id @default(cuid())
  title            String             @db.VarChar(300)
  read             Boolean            @default(false) @db.Boolean
  is_deleted       Boolean            @default(false)
  createdAt        DateTime           @default(now()) @db.Timestamp()
  updatedAt        DateTime           @default(now()) @updatedAt @db.Timestamp()
  User             User?              @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID           String?
  Company          Company[]
  Application      Application[]
  ProjectOrganizer ProjectOrganizer[]
}

model Message {
  messageID     String          @id @default(cuid())
  message       String?
  senderID      String
  receiverID    String
  Media         Media[]
  createdAt     DateTime        @default(now()) @db.Timestamp()
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamp()
  MessageStatus MessageStatus[]
  sender        User            @relation("SentMessage", fields: [senderID], references: [userID], onDelete: Cascade)
  receiver      User            @relation("ReceivedMessage", fields: [receiverID], references: [userID], onDelete: Cascade)
}

model MessageStatus {
  messageStatusID String   @id @default(cuid())
  isRead          Boolean  @default(false)
  Message         Message? @relation(fields: [messageID], references: [messageID])
  messageID       String?
  User            User?    @relation(fields: [userID], references: [userID])
  userID          String?
  createdAt       DateTime @default(now()) @db.Timestamp()
  updatedAt       DateTime @default(now()) @updatedAt @db.Timestamp()
}

model Company {
  companyID    String             @id @default(cuid())
  companyName  String             @db.VarChar(300)
  slug         String             @db.VarChar(300)
  description  String             @db.VarChar(1000)
  location     String             @db.VarChar(300)
  companySize  String             @db.VarChar(300)
  verified     Boolean            @default(false) @db.Boolean
  Requirements Requirements[]
  JobPost      JobPost[]
  review       Review[]
  Organizer    ProjectOrganizer[]
  Notification Notification[]
  createdAt    DateTime           @default(now()) @db.Timestamp()
  updatedAt    DateTime           @default(now()) @updatedAt @db.Timestamp()
  User         User?              @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID       String?            @unique
  media        Media[]
}

model Profile {
  profileID  String      @id @default(cuid())
  firstname  String      @db.VarChar(256)
  lastname   String      @db.VarChar(256)
  phone      String?
  birthday   DateTime?   @default(now()) @db.Date
  createdAt  DateTime    @default(now()) @db.Timestamp()
  updatedAt  DateTime    @default(now()) @updatedAt @db.Timestamp()
  Avatar     Media?      @relation("Avatar", fields: [avatarID], references: [mediaID])
  avatarID   String?     @unique
  Header     Media?      @relation("Header", fields: [headerID], references: [mediaID])
  headerID   String?     @unique
  Resume     Resume[]
  Skills     Skills[]
  Portfolio  Portfolio[]
  Education  Education[]
  theme      Theme[]
  Social     Social?
  About      About?
  User       User?       @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID     String?     @unique
  Font       Font?       @relation(fields: [fontFontID], references: [fontID])
  fontFontID String?
}

model Social {
  socialID  String   @id @default(cuid())
  instagram String?
  facebook  String?
  Github    String?
  X         String?
  Web       String?
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp()
  Profile   Profile? @relation(fields: [profileID], references: [profileID])
  profileID String?  @unique
}

model ResetPassword {
  resetPassID String   @id @default(cuid())
  reset       String   @db.VarChar(200)
  expiredAt   DateTime @db.Timestamp()
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp()
  User        User?    @relation(fields: [userID], references: [userID])
  userID      String?
}

model About {
  aboutID   String   @id @default(cuid())
  bio       String?  @db.VarChar(1000)
  Skills    Skills[]
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp()
  Profile   Profile? @relation(fields: [profileID], references: [profileID], onDelete: Cascade)
  profileID String?  @unique
}

model Skills {
  skillsID  String      @id @default(cuid())
  skills    String      @unique @db.VarChar(100)
  createdAt DateTime    @default(now()) @db.Timestamp()
  updatedAt DateTime    @default(now()) @updatedAt @db.Timestamp()
  About     About?      @relation(fields: [aboutID], references: [aboutID], onDelete: Cascade)
  aboutID   String?
  Portfolio Portfolio[]
  Profile   Profile[]
  profileID String?
  JobPost   JobPost[]
  Education Education[]
}

model Media {
  mediaID     String     @id @default(cuid())
  media       String     @db.Text
  createdAt   DateTime   @default(now()) @db.Timestamp()
  updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamp()
  Portfolio   Portfolio? @relation(fields: [portfolioID], references: [portfolioID], onDelete: Cascade)
  portfolioID String?
  Company     Company?   @relation(fields: [companyID], references: [companyID])
  companyID   String?
  Avatar      Profile?   @relation("Avatar")
  Header      Profile?   @relation("Header")
  Message     Message[]
}

model Portfolio {
  portfolioID    String   @id @default(cuid())
  title          String   @db.VarChar(300)
  description    String   @db.VarChar(1000)
  employmentType String   @db.VarChar(300)
  companyName    String   @db.VarChar(300)
  location       String   @db.VarChar(300)
  locationType   String   @db.VarChar(300) //Hybrid Onsite Work-from-home
  startMonth     String   @db.VarChar(100)
  startYear      String   @db.VarChar(100)
  endMonth       String?  @db.VarChar(100)
  endYear        String?  @db.VarChar(100)
  createdAt      DateTime @default(now()) @db.Timestamp()
  updatedAt      DateTime @default(now()) @updatedAt @db.Timestamp()
  Media          Media[]
  Skills         Skills[]
  Profile        Profile? @relation(fields: [profileID], references: [profileID], onDelete: Cascade)
  profileID      String?
}

model Theme {
  themeID   String    @id @default(cuid())
  theme     String
  image     String
  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp()
  Profile   Profile[]
  User      User?     @relation(fields: [userID], references: [userID])
  userID    String?
}

model Font {
  fontID    String    @id @default(cuid())
  font      String
  image     String
  createdAt DateTime  @default(now()) @db.Timestamp()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamp()
  Profile   Profile[]
  User      User?     @relation(fields: [userID], references: [userID])
  userID    String?
}

model Education {
  educationID String   @id @default(cuid())
  school      String   @db.VarChar(500)
  degree      String   @db.VarChar(200)
  study       String   @db.VarChar(300)
  startMonth  String   @db.VarChar(100)
  startYear   String   @db.VarChar(100)
  endMonth    String?  @db.VarChar(100)
  endYear     String?  @db.VarChar(100)
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp()
  Profile     Profile? @relation(fields: [profileID], references: [profileID])
  profileID   String?
  Skills      Skills[]
}

model Resume {
  resumeID    String        @id @default(cuid())
  title       String        @db.Text
  resume      String        @db.Text
  createdAt   DateTime      @default(now()) @db.Timestamp()
  updatedAt   DateTime      @default(now()) @updatedAt @db.Timestamp()
  Profile     Profile?      @relation(fields: [profileID], references: [profileID], onDelete: Cascade)
  profileID   String?
  Application Application[]
}

model PasswordHash {
  passowrdID String   @id @default(cuid())
  passHash   String   @db.Text
  createdAt  DateTime @default(now()) @db.Timestamp()
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamp()
  User       User?    @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID     String?
}

model Payment {
  paymentID   String      @id @default(cuid())
  paymentType paymentType
  createdAt   DateTime    @default(now()) @db.Timestamp()
  updatedAt   DateTime    @default(now()) @updatedAt @db.Timestamp()
}

model JobPost {
  jobPostID   String        @id @default(cuid())
  title       String        @db.VarChar(300)
  slug        String
  description String        @db.Text
  location    String        @db.VarChar(100)
  duration    String        @db.VarChar(300)
  JobType     String[]
  endDate     DateTime      @db.Date
  experience  String        @db.VarChar(100)
  status      String        @db.VarChar(200)
  isArchive   Boolean       @default(false)
  isOpen      String        @db.VarChar(200)
  featured    Boolean       @default(false) @db.Boolean
  createdAt   DateTime      @default(now()) @db.Timestamp()
  updatedAt   DateTime      @default(now()) @updatedAt @db.Timestamp()
  Salary      Salary?
  Application Application[]
  Favourite   Favourite[]
  Skills      Skills[]
  Report      Report[]
  Company     Company?      @relation(fields: [companyID], references: [companyID], onDelete: Cascade)
  companyID   String?
}

model Salary {
  salaryID  String   @id @default(cuid())
  fixed     Int?     @db.Integer
  min       Float?
  max       Float?
  currency  String   @db.VarChar(3)
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp()
  JobPost   JobPost? @relation(fields: [jobPostID], references: [jobPostID])
  jobPostID String?  @unique
}

model Favourite {
  favouriteID String   @id @default(cuid())
  createdAt   DateTime @default(now()) @db.Timestamp()
  User        User?    @relation(fields: [userID], references: [userID])
  userID      String?
  JobPost     JobPost? @relation(fields: [jobpostID], references: [jobPostID])
  jobpostID   String?
}

model Report {
  reportID  String   @id @default(cuid())
  message   String
  User      User?    @relation(fields: [userID], references: [userID])
  userID    String?
  JobPost   JobPost? @relation(fields: [jobpostID], references: [jobPostID])
  jobpostID String?
}

model Application {
  applicationID String            @id @default(cuid())
  id            String            @db.VarChar(20)
  status        String            @db.VarChar(200)
  createdAt     DateTime          @default(now()) @db.Timestamp()
  updatedAt     DateTime          @default(now()) @updatedAt @db.Timestamp()
  ATS           ApplicationScore?
  Resume        Resume[]
  Notification  Notification[]
  JobPost       JobPost?          @relation(fields: [jobPostID], references: [jobPostID], onDelete: Cascade)
  jobPostID     String?
  User          User?             @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID        String?
}

model ActivityLogs {
  logsID      String   @id @default(cuid())
  title       String   @db.VarChar(200)
  description String   @db.VarChar(200)
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp()
  User        User?    @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID      String?
}

model ApplicationScore {
  applicationScoreID String       @id @default(cuid())
  score              Decimal      @db.Decimal(10, 2)
  createdAt          DateTime     @default(now()) @db.Timestamp()
  updatedAt          DateTime     @default(now()) @updatedAt @db.Timestamp()
  Application        Application? @relation(fields: [applicationID], references: [applicationID], onDelete: Cascade)
  applicationID      String?      @unique
}

model Schedule {
  scheduleID  String   @id @default(cuid())
  title       String   @db.VarChar(300)
  description String?  @db.VarChar(1000)
  startDate   DateTime @db.Date
  startTime   String   @db.VarChar(50)
  endTime     String   @db.VarChar(50)
  endDate     DateTime @db.Date
  link        String   @db.Text
  createdAt   DateTime @default(now()) @db.Timestamp()
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamp()
  senderID    String
  receiverID  String
  sender      User     @relation(name: "ScheduleSender", fields: [senderID], references: [userID], onDelete: Cascade)
  receiver    User     @relation(name: "ScheduleReceiver", fields: [receiverID], references: [userID], onDelete: Cascade)
}

model Review {
  reviewID  String   @id @default(cuid())
  review    String
  rating    Float
  createdAt DateTime @default(now()) @db.Timestamp()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamp()
  User      User?    @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID    String?
  Company   Company? @relation(fields: [companyID], references: [companyID], onDelete: Cascade)
  companyID String?
}

model ProjectOrganizer {
  projectOrganizerID String         @id @default(cuid())
  title              String         @db.VarChar(300)
  status             String         @db.VarChar(100)
  amount             Float
  startDate          DateTime       @db.Date
  endDate            DateTime       @db.Date
  description        String         @db.Text
  createdAt          DateTime       @default(now()) @db.Timestamp()
  updatedAt          DateTime       @default(now()) @updatedAt @db.Timestamp()
  Notification       Notification[]
  User               User?          @relation(fields: [userID], references: [userID], onDelete: Cascade)
  userID             String?
  Company            Company?       @relation(fields: [companyID], references: [companyID])
  companyID          String?
}
