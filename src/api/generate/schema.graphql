### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AboutInput {
  bio: String
}

union AboutPayload = ErrorObject | about

type ActivityLogsPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [activityLogs]
  totalItems: Int
  totalPages: Int
}

type ApplicantPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [application]
  totalItems: Int
  totalPages: Int
}

union ApplicationPayload = ErrorObject | application

type CompaniesPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [company]
  totalItems: Int
  totalPages: Int
}

input CompanyInput {
  companyName: String
  companySize: String
  description: String
  location: String
}

union CredentialsPayload = ErrorObject | token

type DashboardObject {
  applicants: Int
  company: Int
  freelancers: Int
  jobpost: Int
  jobpostList(filter: String): [JobCount]
  report: Int
  schedule: Int
  userID: ID
  users: Int
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input EducationInput {
  degree: String
  endMonth: String
  endYear: String
  school: String
  startMonth: String
  startYear: String
  study: String
}

union EducationPayload = ErrorObject | education

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

union EmailPayload = ErrorObject | user

type EmployerDashboard {
  JobPost: Int
  applicants: Int
  companyID: ID
  getMyJobPost(filter: String): [JobCount]
  getScheduleList: [schedule]
  projects: Int
  schedule: Int
  userID: ID
}

interface Error {
  code: Int
  message: String
}

type ErrorObject implements Error {
  code: Int
  message: String
}

union FavouritePayload = ErrorObject | favourite

type FontPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [fonts]
  totalItems: Int
  totalPages: Int
}

type GroupMessage {
  message: message
  user: user
  userID: ID
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type JobCount {
  applicants: Int
  jobPostID: String
  jobTitle: jobpost
}

type JobPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [jobpost]
  totalItems: Int
  totalPages: Int
}

union JobPostPayload = ErrorObject | jobpost

union MediaPayload = ErrorObject | media

type MessageStatus {
  createdAt: DateTime
  isRead: Boolean
  messageStatusID: ID
  updatedAt: DateTime
}

type Mutation {
  ChangeEmailAddress(email: String!, userID: ID!): UserPayload
  Logout(userID: ID!): activityLogs
  addProfileAvatar(file: Upload!, profileID: ID!): profile
  addProfileHeader(file: Upload!, profileID: ID!): profile
  addProfileThemnFonts(fontID: ID!, profileID: ID!, themeID: ID!): profile
  addSkillToProfile(profileID: ID!, skills: [String]): profile
  addSkills: [skills]
  archiveJobPost(boolean: Boolean, jobPostID: ID!): jobpost
  archiveNotification(notificationID: ID!): notification
  cancelSubscription(userID: ID!): PaypalObject
  checkMyEmailAddress(email: String!): EmailPayload
  companyUploadDocuments(companyID: ID!, file: Upload!): requirement
  createAbout(input: AboutInput!, profileID: ID!): AboutPayload
  createApplication(jobPostID: ID!, resumeID: ID!, userID: ID!): ApplicationPayload
  createAvatar(file: Upload!, profileID: ID!): MediaPayload
  createCompanyReview(companyID: ID!, rating: Float!, review: String!): review
  createEducationBackground(input: EducationInput!, profileID: ID!): EducationPayload
  createFavourite(jobPostID: ID!, userID: ID!): FavouritePayload
  createFontFamily(file: Upload!, font: String!, userID: ID!): fonts
  createJobPost(companyID: ID!, file: Upload, input: jobPostInput!, salary: salaryInput!, skills: [String]!): JobPostPayload
  createMessage(file: [Upload], message: String, receiverID: String!, senderID: String!): message
  createPortfolio(input: PortfolioInput!, profileID: ID!, skills: [String]): PortfolioPayload
  createReportJobPost(jobPostID: ID!, message: String!, userID: ID!): report
  createResume(file: Upload, profileID: ID!): ResumePayload
  createSchedule(actkn: String!, applicantID: ID!, input: ScheduleInput!, receiverID: String!, senderID: String!): SchedulePayload
  createSkills(input: SkillInput!): SkillPayload
  createSocialLink(Github: String, Web: String, X: String, facebook: String, instagram: String, profileID: ID!): social
  createTheme(file: Upload!, theme: String!, userID: ID!): theme
  createUserAdminAccount(input: UserInput!): UserPayload
  createUserFreelancers(fileUpload: Upload!, input: UserFreelanceInput!, requirement: RequirementInput, skills: [String]!): UserPayload
  createUserRecruiter(file: Upload!, input: UserRecruiterInput!, subscriptionId: String): UserPayload
  createUserReview(companyID: ID!, rating: Float!, review: String!, userID: ID!): review
  createZoomIntegration(accountID: String!, clientID: String!, secretID: String!, userID: ID!): zintegration
  deactivateMyAccount(userID: ID!): user
  deleteAbout(aboutID: ID!): about
  deleteEducationBackground(educationID: ID!): education
  deleteFavourite(favouriteID: ID!): favourite
  deleteFontFamily(fontID: ID!, userID: ID!): fonts
  deleteJobPost(jobPostID: ID!): jobpost
  deleteMessage(messageID: ID!): message
  deletePortfolio(portfolioID: ID!): portfolio
  deleteProfileAvatar(mediaID: ID!, profileID: ID!): profile
  deleteProfileHeader(mediaID: ID!, profileID: ID!): profile
  deleteResume(resumeID: ID!): resume
  deleteSchedule(scheduleID: ID!): schedule
  deleteSkills(skillsID: ID!): skills
  deleteTheme(themeID: ID!): theme
  deleteUserAccount(userID: ID!): user
  findMyEmailAddress(email: String!): EmailPayload
  generateApplicantByJobPostID(endDate: String!, jobPostID: ID!, startDate: String!): [application]
  generateJobPostApplicant(jobPostID: ID!): [jobpost]
  generateProjectOrganizer(endDate: String, startDate: String, userID: ID!): [project]
  getMyResetPasswordLink(reset: String!): resetPasswordPayload
  login(email: String!, password: String!): CredentialsPayload
  markallNotificationAsRead(userID: ID!): notification
  removedSkillToProfile(profileID: ID!, skillsID: ID!): profile
  updateAbout(aboutID: ID!, bio: String!): about
  updateApplicationStatus(applicationID: ID!, status: String!): application
  updateCompany(companyID: ID!): company
  updateCompanyLogo(companyID: ID!, file: Upload!): company
  updateEducationBackground(educationID: ID!, input: EducationInput): education
  updateFontFamily(file: Upload, font: String!, fontID: String!): fonts
  updateJobPost(input: jobPostInput, jobPostID: ID!, salary: salaryInput, skills: [String]!): jobpost
  updateJobSettings(applicationStatus: String, jobPostID: ID!, status: String): jobpost
  updateMessageStatus(receiverID: ID!): message
  updateNotification(notificationID: ID!): notification
  updatePortfolio(input: PortfolioInput!, portfolioID: ID!, skills: [String]!): portfolio
  updateProfile(input: ProfileInput!, profileID: ID!): profile
  updateProjectDetails(amount: Int!, endDate: Date!, projectOrganizerID: ID!, startDate: Date!, title: String!, userID: ID!): project
  updateProjectStatus(projectOrganizerID: ID!, status: String!, userID: ID!): project
  updateSchedule(input: ScheduleInput!, scheduleID: ID!): schedule
  updateSkills(input: SkillInput!, skillsID: ID!): skills
  updateSocialLink(Github: String, Web: String, X: String, facebook: String, instagram: String, socialID: ID!): social
  updateTheme(file: Upload, theme: String!, themeID: ID!): theme
  updateUserPasswordAccount(password: String!, userID: ID!): UserPayload
  updateUserProfile(input: ProfileInput, userID: ID!): user
  updateZoomIntegration(accountID: String!, clientID: String!, integrationID: ID!, secretID: String!): zintegration
  upgradeSubscription(subscriptionId: String!, userID: ID!): user
  verifyMyAccount(userID: ID!): user
  zoom_access(userID: ID!): zoom
}

type NotificationPagination {
  cursor: String
  notification: [notification]
}

input PaginationInput {
  page: Int
  take: Int
}

type PaypalObject {
  reason: String
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

input PortfolioInput {
  companyName: String
  description: String
  employmentType: String
  endMonth: String
  endYear: String
  location: String
  locationType: String
  startMonth: String
  startYear: String
  title: String
}

union PortfolioPayload = ErrorObject | portfolio

input ProfileInput {
  birthday: Date
  firstname: String
  lastname: String
  phone: String
}

type ProjectOrganizerPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [project]
  totalItems: Int
  totalPages: Int
}

type Query {
  getAboutById(aboutID: ID!): about
  getAboutByProfileID(profileID: ID!): about
  getAllCompanies(input: PaginationInput!, search: String): CompaniesPagination
  getAllCompanyReview(companyID: ID!, input: PaginationInput!): ReviewPagination
  getAllEducationByProfileId(profileID: ID!): [education]
  getAllFonts(pagination: PaginationInput!, search: String): FontPagination
  getAllJobPost(input: PaginationInput!): [jobpost]
  getAllJobPostReport(input: PaginationInput!): ReportPagination
  getAllMySaveJobs(userID: ID!): [favourite]
  getAllMySocialLink(profileID: ID!): social
  getAllResumyByProfileID(profileID: ID!): [resume]
  getAllUserAccountByRole(input: PaginationInput, role: String, search: String): UserPagination
  getApplicantJobPostByIdPagination(input: PaginationInput!, jobPostID: ID!, search: String): ApplicantPagination
  getApplicationByID(applicationID: ID!): application
  getCompanyByID(companyID: ID!): company
  getCompanyProjects(companyID: ID!, input: PaginationInput!, orderBy: String!, search: String!): ProjectOrganizerPagination
  getCompanySlug(slug: String!): company
  getDashboardQuery: DashboardObject
  getEducationById(educationID: ID!): education
  getEmployerDashboardQuery(companyID: ID): EmployerDashboard
  getJobBoard(duration: [String], experience: [String], filter: String!, input: PaginationInput!, jobType: [String], orderBy: String, search: String, skills: [String]): JobPagination
  getJobPostById(jobPostID: ID!): jobpost
  getMessages(search: String, userID: ID!): [GroupMessage]
  getMyApplication(input: PaginationInput!, status: String!, userID: ID!): ApplicantPagination
  getMyCompanyByUserID(userID: ID!): company
  getMyFavouriteJobPost(jobPostID: ID!, userID: ID!): favourite
  getMyZoomIntegration(userID: ID!): zintegration
  getNotificationByID(notificationID: ID!): notification
  getNotificationByUserID(cursor: String, limit: Int, userID: ID!): NotificationPagination
  getPersonalMessage(receiverID: ID!, senderID: ID!): [message]
  getPortfolioByProfileID(profileID: ID!): [portfolio]
  getProfileByUser(userID: ID!): profile
  getProjectOrganizedID(projectOrganizerID: ID!): project
  getReceiverByDate(date: String!, userID: ID!): [schedule]
  getReportById(reportID: ID!): report
  getReviewById(reviewID: ID!): review
  getScheduleByDate(date: String!, userID: ID!): [schedule]
  getScheduleById(scheduleID: ID!): schedule
  getSimilarJobPost(input: PaginationInput!, jobPostID: ID!, skills: [String]!): [jobpost]
  getSkillByProfileID(profileID: ID!): [skills]
  getThemes(pagination: PaginationInput!, search: String): ThemePagination
  getUnreadCountMessage(userID: ID!): Int
  getUserAccountById(userID: ID!): user
  getUserActivityLogs(input: PaginationInput!, userID: ID!): ActivityLogsPagination
  getUserProfileById(profileID: ID!): profile
  getUserProjectOrganizer(input: PaginationInput!, status: String!, userID: ID!): ProjectOrganizerPagination
  jobPagination(archive: Boolean, pagination: PaginationInput, search: String, userID: ID!): JobPagination
  skillsPagination(input: PaginationInput!, search: String): SkillsPagination
  unreadNotification(userID: ID!): Int
}

type ReportPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [report]
  totalItems: Int
  totalPages: Int
}

input RequirementInput {
  type: String
}

union ResumePayload = ErrorObject | resume

type ReviewPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [review]
  totalItems: Int
  totalPages: Int
}

input ScheduleInput {
  description: String
  duration: Int
  endDate: Date
  endTime: String
  startDate: Date
  startTime: String
  title: String
}

type SchedulePagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [schedule]
  totalItems: Int
  totalPages: Int
}

union SchedulePayload = ErrorObject | schedule

input SkillInput {
  skills: String
}

union SkillPayload = ErrorObject | skills

type SkillsPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [skills]
  totalItems: Int
  totalPages: Int
}

union SocialPayload = ErrorObject | social

type ThemePagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [theme]
  totalItems: Int
  totalPages: Int
}

type UnReadNotification {
  unreadNotification: Int
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserFreelanceInput {
  email: String
  firstname: String
  lastname: String
  password: String
}

input UserInput {
  birthday: Date
  email: String
  firstname: String
  lastname: String
  password: String
  phone: PhoneNumber
}

type UserPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [user]
  totalItems: Int
  totalPages: Int
}

union UserPayload = ErrorObject | user

input UserRecruiterInput {
  companyName: String
  companySize: String
  description: String
  email: String
  firstname: String
  lastname: String
  location: String
  password: String
  plan: String
}

type about {
  aboutID: ID
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
}

type activityLogs {
  createdAt: DateTime
  description: String
  logsID: ID
  title: String
  updatedAt: DateTime
}

type application {
  applicationID: ID
  company: company
  createdAt: DateTime
  id: String
  jobPost: jobpost
  resume: resume
  score: ats
  status: String
  updatedAt: DateTime
  user: user
}

type ats {
  applicationID: ID
  createdAt: DateTime
  score: Float
  updatedAt: DateTime
}

type company {
  companyID: ID
  companyName: String
  companyProject: [project]
  companySize: String
  description: String
  getJobPostCount: Int
  jobPost: [jobpost]
  location: String
  logo: media
  requirements: [requirement]
  slug: String
  user: user
  verified: Boolean
}

type education {
  createdAt: DateTime
  degree: String
  educationID: ID
  endMonth: String
  endYear: String
  school: String
  startMonth: String
  startYear: String
  study: String
  updatedAt: DateTime
}

type favourite {
  createdAt: DateTime
  favouriteID: ID
  jobPost: jobpost
  user: user
}

type fonts {
  createdAt: DateTime
  font: String
  fontID: ID
  image: String
  updatedAt: DateTime
}

input jobPostInput {
  JobType: [String]
  description: String
  duration: String
  experience: String
  isOpen: String
  location: String
  status: String
  title: String
}

type jobpost {
  JobType: [String]
  applicants: [application]
  createdAt: DateTime
  description: String
  duration: String
  endDate: Date
  experience: String
  getCompany: company
  isArchive: Boolean
  isOpen: String
  jobPostID: ID
  location: String
  salary: salary
  skills: [skills]
  slug: String
  status: String
  title: String
  totalApplicant: Int
  updatedAt: DateTime
}

type media {
  createdAt: DateTime
  media: String
  mediaID: ID
  updatedAt: DateTime
}

type message {
  createdAt: DateTime
  media: media
  message: String
  messageID: ID
  messageStatus: MessageStatus
  receivedUser: user
  receiverID: String
  sendUser: user
  senderID: String
  updatedAt: DateTime
}

type notification {
  application: application
  company: [company]
  createdAt: DateTime
  notificationID: ID
  project: [project]
  read: Boolean
  schedule: schedule
  title: String
  updatedAt: DateTime
}

type password {
  createdAt: DateTime
  password: String
  passwordID: ID
  updatedAt: DateTime
}

type portfolio {
  companyName: String
  createdAt: DateTime
  description: String
  employmentType: String
  endMonth: String
  endYear: String
  location: String
  locationType: String
  media: [media]
  portfolioID: ID
  skills: [skills]
  startMonth: String
  startYear: String
  title: String
  updatedAt: DateTime
}

type profile {
  about: about
  avatar: media
  birthday: Date
  createdAt: DateTime
  education: [education]
  firstname: String
  getMyFont: fonts
  getMyResume: [resume]
  getMyTheme: theme
  header: media
  lastname: String
  phone: PhoneNumber
  portfolio: [portfolio]
  profileID: ID
  review: [review]
  skills: [skills]
  social: social
  updatedAt: DateTime
  user: user
}

type project {
  amount: Float
  company: company
  createdAt: DateTime
  description: String
  endDate: DateTime
  projectOrganizerID: ID
  startDate: DateTime
  status: String
  title: String
  updatedAt: DateTime
  user: user
}

type report {
  createdAt: DateTime
  jobPost: [jobpost]
  message: String
  reportID: ID
  user: user
}

type requirement {
  createdAt: DateTime
  requirement: String
  requirementsID: ID
  type: String
  updatedAt: DateTime
}

type resetPassword {
  createdAt: DateTime
  expiredAt: DateTime
  reset: String
  resetPassID: ID
  updatedAt: DateTime
}

union resetPasswordPayload = ErrorObject | resetPassword

type resume {
  createdAt: DateTime
  resume: String
  resumeID: ID
  title: String
  updatedaAt: DateTime
}

type review {
  User: user
  company: company
  createdAt: DateTime
  rating: Int
  review: String
  reviewID: ID
  updatedAt: DateTime
}

enum roleEnum {
  admin
  freelance
  recruiter
}

type salary {
  createdAt: DateTime
  currency: String
  fixed: Float
  max: Float
  min: Float
  salaryID: ID
  updatedAt: DateTime
}

input salaryInput {
  currency: String
  fixed: Int
  max: Float
  min: Float
}

union salaryPayload = ErrorObject | salary

type schedule {
  applicant: user
  createdAt: DateTime
  description: String
  endDate: DateTime
  endTime: String
  link: String
  scheduleID: ID
  startDate: DateTime
  startTime: String
  title: String
  updatedAt: DateTime
}

type skills {
  createdAt: DateTime
  jobCount: Int
  skills: String
  skillsID: ID
  updatedAt: DateTime
}

type skillsGroup {
  count: Int
  skills: String
}

type social {
  Github: String
  Web: String
  X: String
  createdAt: DateTime
  facebook: String
  instagram: String
  socialID: ID
  updatedAt: DateTime
}

type theme {
  createdAt: DateTime
  image: String
  theme: String
  themeID: ID
  updatedAt: DateTime
}

type token {
  role: String
  token: String
  user: user
  userID: ID
}

type user {
  createdAt: DateTime
  email: String
  getMyApplication: [application]
  getMyCompany: company
  getMyLogs: [activityLogs]
  getMyNotification: [notification]
  messages: [message]
  myProfile: profile
  password: String
  passwordHash: [password]
  plan: String
  projectOrganizer: [project]
  receiverList: [message]
  requirement: [requirement]
  review: [review]
  role: String
  senderList: [message]
  updatedAt: DateTime
  userID: ID
  verified: Boolean
}

type zintegration {
  accountID: String
  clientID: String
  integrationID: ID
  secretID: String
}

type zoom {
  access_token: String
  api_url: String
  expires_in: Int
  scope: String
  token_type: String
}

type zoom_meeting {
  created_at: String
  duration: Int
  encrypted_password: String
  h323_password: String
  host_id: String
  id: Int
  join_url: String
  password: String
  pstn_password: String
  start_time: String
  start_url: String
  status: String
  timezone: String
  topic: String
  type: String
  uuid: String
}