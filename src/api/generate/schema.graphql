### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AboutInput {
  bio: String
}

type AlreadyExist implements Error {
  code: Int
  message: String
}

union ApplicationPayload = BADINPUT | Forbidden | application

type BADINPUT implements Error {
  code: Int
  message: String
}

input CompanyInput {
  companyName: String
  companySize: String
  description: String
  location: String
}

type CredentialsInvalid implements Error {
  code: Int
  message: String
}

union CredentialsPayload = BADINPUT | CredentialsInvalid | NOTFOUND | token

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

union EmailPayload = BADINPUT | NOTFOUND | user

interface Error {
  code: Int
  message: String
}

type Expired implements Error {
  code: Int
  message: String
}

type Forbidden implements Error {
  code: Int
  message: String
}

type JobPagination {
  currentPage: Int
  hasNextPage: Boolean
  hasPrevPage: Boolean
  item: [jobpost]
  totalItems: Int
  totalPages: Int
}

union JobPostPayload = BADINPUT | Forbidden | jobpost

type Mutation {
  archiveJobPost(jobPostID: ID!): jobpost
  createAbout(input: AboutInput!, profileID: ID!): about
  createApplication(jobPostID: ID!, resumeID: ID!, userID: ID!): ApplicationPayload
  createJobPost(companyID: ID!, input: jobPostInput!, salary: salaryInput!, skillsID: [ID]!): JobPostPayload
  createMessage(message: String!, receiverID: String!, senderID: String!): message
  createPortoflio(file: Upload, input: PortfolioInput!, profileID: ID!): PortfolioPayload
  createSchedule(input: ScheduleInput!, receiverID: String!, senderID: String!): SchedulePayload
  createSkills(input: SkillInput!): SkillPayload
  createUserAdminAccount(input: UserInput!): UserPayload
  createUserFreelancers(fileUpload: Upload!, input: UserFreelanceInput!, requirement: RequirementInput): UserPayload
  createUserRecreuiters(input: UserRecruiterInput!): UserPayload
  deleteJobPost(jobPostID: ID!): jobpost
  deleteMedia(mediaID: ID!): media
  deletePortoflio(portfolioID: ID!): portfolio
  deleteSchedule(scheduleID: ID!): schedule
  deleteSkills(skillsID: ID!): skills
  deleteUserAccount(userID: ID!): user
  findMyEmailAddress(email: String!): EmailPayload
  generateJobPostApplicant(jobPostID: ID!): [jobpost]
  getMyResetPasswordLink(reset: String!): resetPasswordPayload
  login(email: String!, password: String!): CredentialsPayload
  updateAbout(aboutID: ID!, bio: String!): about
  updateApplicationStatus(applicationID: ID!, status: String!): application
  updateCompany(companyID: ID!, verified: Boolean!): company
  updateJobPost(input: jobPostInput!, jobPostID: ID!): jobpost
  updateJobPostDefault(isDraft: Boolean!, jobPostID: ID!): jobpost
  updateMessage(message: String!, messageID: String!): message
  updateNotification(notificationID: ID!): notification
  updatePorfolio(input: PortfolioInput!, portfolioID: ID!): portfolio
  updateProfile(input: ProfileInput!, profileID: ID!): profile
  updateSchedule(input: ScheduleInput!, scheduleID: ID!): schedule
  updateSkills(input: SkillInput!, skillsID: ID!): skills
  updateUserPasswordAccount(password: String!, userID: ID!): UserPayload
  verifyMyAccount(userID: ID!): user
}

type NOTFOUND implements Error {
  code: Int
  message: String
}

input PaginationInput {
  page: Int
  take: Int
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

input PortfolioInput {
  companyName: String
  description: String
  employmentType: String
  endDate: Date
  location: String
  locationType: String
  startDate: Date
  title: String
}

union PortfolioPayload = BADINPUT | portfolio

input ProfileInput {
  birthday: Date
  firstname: String
  lastname: String
  phone: String
}

type Query {
  getAboutByProfileID(profileID: ID!): about
  getAllCompanies(input: PaginationInput!): [company]
  getAllJobPost(input: PaginationInput!): [jobpost]
  getAllMediaProfile(pagination: PaginationInput!, profileID: ID!): [media]
  getAllResumyByProfileID(profileID: ID!): [resume]
  getAllSchedule(input: PaginationInput): [schedule]
  getAllSkill(input: PaginationInput): [skills]
  getAllUserAccountByRole(input: PaginationInput, role: roleEnum): [user]
  getApplicationByID(applicationID: ID!): application
  getCompanyByID(companyID: ID!): company
  getJobApplicationById(jobPostID: ID!, pagination: PaginationInput!): [application]
  getJobPostById(jobPostID: ID!): jobpost
  getMyCompanyByUserID(userID: ID!): company
  getMyCompanyJobPost(pagination: PaginationInput, userID: ID!): [jobpost]
  getNotificationByID(notificationID: ID!): notification
  getNotificationByUserID(pagination: PaginationInput!, userID: ID!): [notification]
  getPersonalMessage(receiverID: ID!, senderID: ID!): [message]
  getPortfolioByProfileID(profileID: ID!): [portfolio]
  getProfileByUser(userID: ID!): profile
  getScheduleById(scheduleID: ID!): schedule
  getSearchByCompanyName(search: String!): company
  getSearchBySkill(search: String!): [skills]
  getSearchByTitle(pagination: PaginationInput!, search: String!): [jobpost]
  getSearchByUser(search: String!): user
  getSkillsByGroup: [skills]
  getUserAccountById(userID: ID!): user
  getUserActivityLogs(input: PaginationInput!, userID: ID!): [activityLogs]
  jobPagination(pagination: PaginationInput, userID: ID!): JobPagination
}

input RequirementInput {
  type: String
}

union ResumePayload = BADINPUT | resume

input ScheduleInput {
  description: String
  endDate: DateTime
  link: String
  startDate: DateTime
  title: String
}

union SchedulePayload = BADINPUT | schedule

input SkillInput {
  skills: String
}

union SkillPayload = BADINPUT | skills

type Subscription {
  getAllUser: [user]
  jobPost: [jobpost]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserFreelanceInput {
  email: String
  firstname: String
  lastname: String
  password: String
}

input UserInput {
  email: String
  firstname: String
  lastname: String
  password: String
}

union UserPayload = AlreadyExist | BADINPUT | user

input UserRecruiterInput {
  companyName: String
  companySize: String
  description: String
  email: String
  firstname: String
  lastname: String
  location: String
  password: String
  plan: String
}

type about {
  aboutID: ID
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
}

type activityLogs {
  createdAt: DateTime
  description: String
  logsID: ID
  title: String
  updatedAt: DateTime
}

type application {
  applicationID: ID
  createdAt: DateTime
  id: String
  score: ats
  status: String
  updatedAt: DateTime
}

type ats {
  applicationID: ID
  createdAt: DateTime
  score: Float
  updatedAt: DateTime
}

type company {
  companyID: ID
  companyName: String
  companySize: String
  description: String
  getJobPostCount: Int
  jobPost: [jobpost]
  location: String
  logo: media
  slug: String
  user: user
  verified: Boolean
}

input jobPostInput {
  JobType: [String]
  description: String
  duration: String
  endDate: DateTime
  experience: String
  location: String
  title: String
}

type jobpost {
  JobType: [String]
  applicants: [application]
  createdAt: DateTime
  description: String
  duration: String
  endDate: DateTime
  experience: String
  getCompany: company
  isArchive: Boolean
  isDraft: Boolean
  isOpen: Boolean
  jobPostID: ID
  salary: salary
  skills: [skills]
  slug: String
  title: String
  totalApplicant: Int
  updatedAt: DateTime
}

type media {
  createdAt: DateTime
  media: String
  mediaID: ID
  updatedAt: DateTime
}

type message {
  createdAt: DateTime
  message: String
  messageID: ID
  receivedUser: message
  receiverID: String
  sendUser: user
  senderID: String
  updatedAt: DateTime
}

type notification {
  createdAt: DateTime
  notificationID: ID
  read: Boolean
  updatedAt: DateTime
}

type password {
  createdAt: DateTime
  password: String
  passwordID: ID
  updatedAt: DateTime
}

type portfolio {
  companyName: String
  createdAt: DateTime
  description: String
  employementType: String
  endDate: Date
  location: String
  media: [media]
  portfolioID: ID
  startDate: Date
  title: String
  updatedAt: DateTime
}

type profile {
  about: about
  avatar: media
  birthday: Date
  createdAt: DateTime
  firstname: String
  getMyResume: [resume]
  getMySkills: [skills]
  lastname: String
  phone: PhoneNumber
  profileID: ID
  updatedAt: DateTime
}

type resetPassword {
  createdAt: DateTime
  expiredAt: DateTime
  reset: String
  resetPassID: ID
  updatedAt: DateTime
}

union resetPasswordPayload = Expired | NOTFOUND | resetPassword

type resume {
  createResume(file: Upload, profileID: ID!): ResumePayload
  createdAt: DateTime
  deleteResume(resumeID: ID!): resume
  resume: String
  resumeID: ID
  updatedaAt: DateTime
}

enum roleEnum {
  admin
  freelance
  recruiter
}

type salary {
  createdAt: DateTime
  currency: String
  max: Float
  min: Float
  salaryID: ID
  updatedAt: DateTime
}

input salaryInput {
  currency: String
  max: Float
  min: Float
}

union salaryPayload = BADINPUT | salary

type schedule {
  createdAt: DateTime
  description: String
  endDate: DateTime
  link: String
  scheduleID: ID
  startDate: DateTime
  title: String
  updatedAt: DateTime
}

type skills {
  createdAt: DateTime
  jobCount: Int
  skills: String
  skillsID: ID
  updatedAt: DateTime
}

type token {
  role: String
  token: String
  userID: ID
}

type user {
  createdAt: DateTime
  email: String
  getMyApplication: [application]
  getMyCompany: company
  getMyLogs: [activityLogs]
  getMyNotification: [notification]
  myProfile: profile
  password: String
  passwordHash: [password]
  plan: String
  role: String
  updatedAt: DateTime
  userID: ID
  verified: Boolean
}