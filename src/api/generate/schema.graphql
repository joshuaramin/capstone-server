### This file was generated by Nexus Schema
### Do not make changes to this file directly


input AboutInput {
  bio: String
}

type BADINPUT implements Error {
  code: Int
  message: String
}

input CompanyInput {
  companyName: String
  companySize: String
  description: String
  location: String
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
A field whose value conforms to the standard internet email address format as specified in HTML Spec: https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address.
"""
scalar EmailAddress @specifiedBy(url: "https://html.spec.whatwg.org/multipage/input.html#valid-e-mail-address")

interface Error {
  code: Int
  message: String
}

type Forbidden implements Error {
  code: Int
  message: String
}

type Mutation {
  createAbout(input: AboutInput!, profileID: ID!): about
  createApplication(jobPostID: ID!, resumeID: ID!, userID: ID!): application
  createJobPost(companyID: ID!, input: jobPostInput!): jobpost
  createPortoflio(file: Upload, input: PortfolioInput!, profileID: ID!): portfolio
  createSkills(input: SkillInput!): skills
  createUserAdminAccount(input: UserInput!): user
  createUserFreelancers(input: UserFreelanceInput!): user
  createUserRecreuiters(input: UserRecruiterInput!): user
  deleteJobPost(jobPostID: ID!): jobpost
  deletePortoflio(portfolioID: ID!): portfolio
  deleteSkills(skillsID: ID!): skills
  deleteUserAccount(userID: ID!): user
  login: user
  updateAbout(aboutID: ID!, bio: String!): about
  updateApplicationStatus(applicationID: ID!, status: String!): application
  updateCompany(companyID: ID!, input: CompanyInput!): company
  updateJobPost(input: jobPostInput!, jobPostID: ID!): jobpost
  updateJobPostDefault(defaultStatus: Boolean!, jobPostID: ID!): jobpost
  updateNotification(notificationID: ID!): notification
  updatePorfolio(input: PortfolioInput!, portfolioID: ID!): portfolio
  updateProfile(input: ProfileInput!, profileID: ID!): profile
  updateSkills(input: SkillInput!, skillsID: ID!): skills
  updateUserPasswordAccount(password: String!, userID: ID!): user
}

input PaginationInput {
  skip: Int
  take: Int
}

"""
A field whose value conforms to the standard E.164 format as specified in: https://en.wikipedia.org/wiki/E.164. Basically this is +17895551234.
"""
scalar PhoneNumber

input PortfolioInput {
  companyName: String
  description: String
  employmentType: String
  endDate: Date
  location: String
  locationType: String
  startDate: Date
  title: String
}

input ProfileInput {
  birthday: Date
  firstname: String
  lastname: String
  phone: String
}

type Query {
  getAboutByProfileID(profileID: ID!): about
  getAllCompanies(input: PaginationInput!): [company]
  getAllJobPost(input: PaginationInput!): [jobpost]
  getAllResumyByProfileID(profileID: ID!): [resume]
  getAllSchedule(input: PaginationInput): [schedule]
  getAllSkill(input: PaginationInput): [skills]
  getAllUserAccountByRole(input: PaginationInput): [user]
  getApplicationByID(applicationID: ID!): application
  getCompanyByID(companyID: ID!): company
  getJobApplicationBYId(jobPostID: ID!): [application]
  getJobPostById(jobPostID: ID!): jobpost
  getNotificationByID(notificationID: ID!): notification
  getNotificationByUserID(userID: ID!): [notification]
  getPortfolioByProfileID(profileID: ID!): [portfolio]
  getProfileByUser(userID: ID!): profile
  getScheduleById(scheduleID: ID!): schedule
  getSearchByCompanyName(search: String!): company
  getSearchBySkill(search: String!): [skills]
  getSearchByTitle(search: String!): [jobpost]
  getSearchByUser(search: String!): user
  getUserAccountById(userID: ID!): user
  getUserActivityLogs(input: PaginationInput!, userID: ID!): [activityLogs]
}

input SkillInput {
  skills: String
}

type Subscription {
  getAllUser: [user]
  jobPost: [jobpost]
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserFreelanceInput {
  birthday: Date
  email: String
  firstname: String
  lastname: String
  password: String
  phone: PhoneNumber
}

input UserInput {
  email: String
  firstname: String
  lastname: String
  password: String
  phone: PhoneNumber
}

input UserRecruiterInput {
  birthday: Date
  companyName: String
  companySize: String
  description: String
  email: String
  firstname: String
  lastname: String
  location: String
  password: String
  phone: PhoneNumber
}

type about {
  aboutID: ID
  bio: String
  createdAt: DateTime
  updatedAt: DateTime
}

type activityLogs {
  createdAt: DateTime
  description: String
  logsID: ID
  title: String
  updatedAt: DateTime
}

type application {
  applicationID: ID
  createdAt: DateTime
  id: String
  status: String
  updatedAt: DateTime
}

type archive {
  archiveID: ID
  createdaAt: DateTime
  updatedAt: DateTime
}

type ats {
  applicationID: ID
  createdAt: DateTime
  score: Float
  updatedAt: DateTime
}

type company {
  companyID: ID
  companyName: String
  companySize: String
  description: String
  location: String
}

input jobPostInput {
  description: String
  keyword: [String]
  title: String
}

type jobpost {
  createdAt: DateTime
  default: Boolean
  description: String
  jobPostID: ID
  keyword: [String]
  title: String
  updatedAt: DateTime
}

type media {
  createdAt: DateTime
  media: String
  mediaID: ID
  updatedAt: DateTime
}

type message {
  createdAt: DateTime
  message: String
  messageID: ID
  receiverID: String
  senderID: String
  updatedAt: DateTime
}

type notification {
  createdAt: DateTime
  notificationID: ID
  read: Boolean
  updatedAt: DateTime
}

type password {
  createdAt: DateTime
  password: String
  passwordID: ID
  updatedAt: DateTime
}

type portfolio {
  companyName: String
  createdAt: DateTime
  description: String
  employementType: String
  endDate: Date
  location: String
  portfolioID: ID
  startDate: Date
  title: String
  updatedAt: DateTime
}

type profile {
  about: about
  avatar: media
  birthday: Date
  createdAt: DateTime
  firstname: String
  getMyResume: [resume]
  getMySkills: [skills]
  lastname: String
  phone: PhoneNumber
  profileID: ID
  updatedAt: DateTime
}

type resume {
  createResume(file: Upload, profileID: ID!): resume
  createdAt: DateTime
  deleteResume(resumeID: ID!): resume
  resume: String
  resumeID: ID
  updatedaAt: DateTime
}

type schedule {
  createdAt: DateTime
  description: String
  endDate: DateTime
  link: String
  scheduleID: ID
  startDate: DateTime
  title: String
  updatedAt: DateTime
}

type skills {
  createdAt: DateTime
  skills: String
  skillsID: ID
  updatedAt: DateTime
}

type user {
  createdAt: DateTime
  email: String
  getMyApplication: [application]
  getMyCompany: company
  getMyLogs: [activityLogs]
  getMyNotification: [notification]
  getMySchedule: [schedule]
  myProfile: profile
  password: String
  passwordHash: [password]
  role: String
  updatedAt: DateTime
  userID: ID
  verified: Boolean
}